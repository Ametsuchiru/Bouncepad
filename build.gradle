plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
}

group 'com.cleanroommc'
version '0.6'
archivesBaseName = 'bouncepad'

def compiler_arguments = [
        '--add-exports=java.base/jdk.internal.access=ALL-UNNAMED',
]

repositories {
    mavenCentral()
    maven {
        name 'Minecraft'
        url 'https://libraries.minecraft.net/'
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {

    embed files('libs/ImagineBreaker-1.3.jar')
    embed 'org.glavo:classfile:0.4.0'

    implementation 'org.apache.logging.log4j:log4j-api:2.22.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.0'

    implementation 'org.ow2.asm:asm:9.6'
    implementation 'org.ow2.asm:asm-commons:9.6'
    implementation 'org.ow2.asm:asm-tree:9.6'

    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

processResources {
    from (configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/**'
    }
}

test {
    useJUnitPlatform()
}

for (int i in 9 .. 21) {
    tasks.register("testJava${i}", Test) {
        group 'verification'
        it.getJavaLauncher().set(javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(i)
        })
        useJUnitPlatform()
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.addAll(compiler_arguments)
}

tasks.named('compileTestJava') {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

idea.project.settings.compiler.javac.javacAdditionalOptions = compiler_arguments.join(' ')

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'bouncepad'
        }
    }
    repositories {
        maven {
            name = 'CleanroomMaven'
            url = CleanroomMaven
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}